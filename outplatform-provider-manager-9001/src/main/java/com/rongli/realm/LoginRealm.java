package com.rongli.realm;import java.nio.charset.Charset;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.crypto.hash.SimpleHash;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.session.Session;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;import org.springframework.core.env.Environment;import com.alibaba.fastjson.JSON;import com.rongli.common.util.Base64Util;import com.rongli.common.util.DesUtil;import com.rongli.common.util.RedisUtil;import com.rongli.common.utils.SpringUtil;import com.rongli.config.shiro.ShiroConfig;import com.rongli.config.start.LoadCpuSerial;import com.rongli.entities.Menu;import com.rongli.entities.Permission;import com.rongli.entities.Role;import com.rongli.entities.User;import com.rongli.mapper.primary.UserMapper;public class LoginRealm extends AuthorizingRealm{		@Override	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {		// TODO Auto-generated method stub		Session session=SecurityUtils.getSubject().getSession();		User user=(User) session.getAttribute("user");		if(user == null){	        return null;	    }		  // 添加角色和权限        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();		for(Role role:user.getRoleList()) {			simpleAuthorizationInfo.addRole(role.getRolename());			for(Menu menu:role.getMenuList()) {				for(Permission permission:menu.getPermissionList()) {					  simpleAuthorizationInfo.addStringPermission(permission.getPermission());				}				addPermission(simpleAuthorizationInfo, menu);			}		}		return simpleAuthorizationInfo;	}		private void addPermission(SimpleAuthorizationInfo simpleAuthorizationInfo, Menu menu) {		if(menu.getSonMenuList() == null) return;		for(Menu menu_son:menu.getSonMenuList()) {			for(Permission permission:menu_son.getPermissionList()) {				  simpleAuthorizationInfo.addStringPermission(permission.getPermission());			}			if(menu_son.getSonMenuList() != null) {				addPermission(simpleAuthorizationInfo, menu_son);			}		}	}	@Override	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {		// TODO Auto-generated method stub		UsernamePasswordToken upToken = (UsernamePasswordToken) token;		String useraccount = upToken.getUsername();			Environment environment = (Environment) SpringUtil.getBean("environment");		try {			String authcode = environment.getProperty("system.des.auth-code");								String key=environment.getProperty("system.des.key");//base64解密 ： powerbok			key=Base64Util.decode(key);						RedisUtil redisUtil=SpringUtil.getBean(RedisUtil.class);									LoadCpuSerial loadCpuSerial=SpringUtil.getBean(LoadCpuSerial.class);						String cpuid=(String) redisUtil.get(loadCpuSerial.getRedis_key());						String decrypt = DesUtil.decrypt(authcode, Charset.forName("UTF-8"), key);						/*if(!decrypt.equals(cpuid)) {//与本机cpuid对于				throw new AuthenticationException("授权失败！");			}*/					} catch (Exception e) {			throw new AuthenticationException("认证异常:"+e.getMessage());		}				User user = SpringUtil.getBean(UserMapper.class).selectUser(useraccount);		System.out.println(JSON.toJSON(user).toString());		if(user == null){			throw new AuthenticationException("该账号未注册");	    }		//3). realmName: 当前 realm 对象的 name. 调用父类的 getName() 方法即可		String realmName = getName();		//4). 盐值. 		ByteSource credentialsSalt = ByteSource.Util.bytes(useraccount);				SimpleAuthenticationInfo info = null;//new SimpleAuthenticationInfo(user, user.getPassword(), getName());		info=new SimpleAuthenticationInfo(user,user.getPassword(),credentialsSalt, realmName);		return info;	}	public static void main(String[] args) {		String hashAlgorithmName = "MD5";		Object credentials = "123";		Object salt = ByteSource.Util.bytes("admin");						Object result = new SimpleHash(hashAlgorithmName, credentials, salt,ShiroConfig.HashIterations);		System.out.println(result);	}}